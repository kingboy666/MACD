!pip install pandas_ta ccxt numpy pandas tenacity -i https://pypi.tuna.tsinghua.edu.cn/simple --quiet

import ccxt
import pandas as pd
import pandas_ta as ta
import traceback
from IPython.display import clear_output, HTML, display, Javascript
import numpy as np
from datetime import datetime, timedelta
import time
import json

# ============================================
# 全局配置常量
# ============================================
MAX_LEVERAGE_BTC_ETH = 50
MAX_LEVERAGE_OTHERS = 30
DEFAULT_LEVERAGE = 20  # 降低杠杆到10倍，更安全
RISK_PER_TRADE = 0.1  # 降低到2%，更保守
MIN_TRADE_AMOUNT_USD = 1
MAX_OPEN_POSITIONS = 5  # 降低到5个，避免过度分散
COOLDOWN_PERIOD = 5 * 60  # 增加到5分钟
ATR_PERIOD = 14
MA_10_PERIOD = 10
MA_20_PERIOD = 20
MIN_ATR_PERCENTAGE = 0.005
MAX_ATR_PERCENTAGE = 0.10
MIN_EMA_DISTANCE = 0.003
RSI_PERIOD = 14
RSI_OVERBOUGHT = 70
RSI_OVERSOLD = 30
MAX_DAILY_TRADES = 20  # 新增：每日最大交易次数
MAX_DAILY_LOSS = 0.05  # 新增：每日最大亏损5%

# 止损止盈配置
FIXED_SL_PERCENTAGE = 0.02  # 2%止损
FIXED_TP_PERCENTAGE = 0.04  # 4%止盈
MAX_SL_PERCENTAGE = 0.03  # 最大3%止损

# ============================================
# 全局变量
# ============================================
klines_cache = {}
timeframe_1h = '1h'
position_tracker = {'positions': {}, 'overall_pnl': 0.0}
trade_stats = {
    'total_trades': 0,
    'wins': 0,
    'losses': 0,
    'total_profit_loss': 0.0,
    'initial_balance': None,
    'current_balance': None,
    'daily_trades': 0,
    'daily_pnl': 0.0,
    'daily_reset_time': datetime.now().replace(hour=0, minute=0, second=0, microsecond=0),
    'monthly_stats': {},
    'symbol_stats': {},
    'current_consecutive_wins': 0,
    'current_consecutive_losses': 0,
    'max_consecutive_wins': 0,
    'max_consecutive_losses': 0,
    'largest_profit': 0,
    'largest_loss': 0,
    'total_profit': 0.0,
    'total_loss': 0.0,
    'profit_factor': 0.0,
    'avg_profit': 0.0,
    'avg_loss': 0.0,
    'closed_positions': {}
}

latest_signals = {}
market_states = {}
current_trends = {}
signal_strengths = {}
cooldown_symbols = {}

# ============================================
# 日志系统
# ============================================
def log_message(level, message):
    """增强的日志功能"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    color_map = {
        'SUCCESS': '\033[92m',
        'ERROR': '\033[91m',
        'WARNING': '\033[93m',
        'SIGNAL': '\033[96m',
        'TRADE': '\033[95m',
        'INFO': '\033[94m',
        'DEBUG': '\033[90m'
    }
    reset = '\033[0m'
    color = color_map.get(level.upper(), '')
    print(f"{color}[{timestamp}] [{level.upper()}] {message}{reset}")

# ============================================
# 防掉线功能
# ============================================
def prevent_colab_timeout():
    """防止Google Colab因长时间不活动而断开连接"""
    try:
        display(Javascript('''
        function ClickConnect(){
            console.log("Keeping Colab connected...");
            document.querySelector("colab-connect-button").click()
        }
        setInterval(ClickConnect, 60000);
        '''))
        log_message("INFO", "已启动Colab防掉线保护")
    except Exception as e:
        log_message("WARNING", f"启动Colab防掉线保护失败: {str(e)}")

# ============================================
# 交易所初始化
# ============================================
from google.colab import userdata

try:
    api_key = userdata.get('OKX_API_KEY')
    secret = userdata.get('OKX_SECRET_KEY')
    password = userdata.get('OKX_PASSWORD')

    exchange = ccxt.okx({
        'timeout': 30000,
        'apiKey': api_key,
        'secret': secret,
        'password': password,
        'options': {'defaultType': 'swap', 'adjustForTimeDifference': True},
        'enableRateLimit': True
    })

    exchange.set_sandbox_mode(False)
    log_message("SUCCESS", "API密钥已成功从 Colab Secrets 加载!")

except Exception as e:
    log_message("ERROR", f"从 Colab Secrets 加载 API 密钥失败: {e}")
    raise

# ============================================
# API连接测试
# ============================================
def test_api_connection():
    """测试API连接是否正常"""
    try:
        log_message("INFO", "开始测试API连接...")
        
        balance = exchange.fetch_balance()
        usdt_balance = balance.get('USDT', {}).get('free', 0)
        log_message("SUCCESS", f"API连接正常，账户余额: {usdt_balance:.2f} USDT")
        
        ticker = exchange.fetch_ticker('BTC/USDT:USDT')
        log_message("SUCCESS", f"市场数据获取正常，BTC价格: {ticker['last']:.2f} USDT")
        
        positions = exchange.fetch_positions()
        open_positions = [pos for pos in positions if pos['contracts'] > 0]
        log_message("SUCCESS", f"持仓信息获取正常，当前持仓数量: {len(open_positions)}")
        
        return True
        
    except ccxt.AuthenticationError as e:
        log_message("ERROR", f"API认证失败: {str(e)}")
        log_message("ERROR", "请检查API密钥、密码和权限设置")
        return False
    except ccxt.NetworkError as e:
        log_message("ERROR", f"网络连接失败: {str(e)}")
        return False
    except Exception as e:
        log_message("ERROR", f"API连接测试失败: {str(e)}")
        return False

# ============================================
# 每日重置功能
# ============================================
def check_daily_reset():
    """检查是否需要重置每日统计"""
    now = datetime.now()
    if now.date() > trade_stats['daily_reset_time'].date():
        log_message("INFO", f"每日统计重置 - 昨日交易: {trade_stats['daily_trades']}, 昨日盈亏: {trade_stats['daily_pnl']:.2f} USDT")
        trade_stats['daily_trades'] = 0
        trade_stats['daily_pnl'] = 0.0
        trade_stats['daily_reset_time'] = now.replace(hour=0, minute=0, second=0, microsecond=0)

# ============================================
# 获取K线数据
# ============================================
def get_klines(symbol, timeframe, limit=100):
    """获取K线数据，带缓存机制"""
    try:
        cache_key = f"{symbol}_{timeframe}"
        if cache_key in klines_cache:
            cached_data, fetch_time = klines_cache[cache_key]
            cache_duration = 60 if timeframe == '1m' else 3600 if timeframe == '1h' else 300
            if (time.time() - fetch_time) < cache_duration:
                return cached_data

        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        klines_cache[cache_key] = (ohlcv, time.time())
        return ohlcv
        
    except Exception as e:
        log_message("ERROR", f"获取 {symbol} {timeframe} K线数据失败: {str(e)}")
        return None

# ============================================
# 处理K线数据并计算指标
# ============================================
def process_klines(ohlcv):
    """处理K线数据并计算技术指标"""
    try:
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)

        # 计算EMA
        df['EMA_10'] = ta.ema(df['close'], length=MA_10_PERIOD)
        df['EMA_20'] = ta.ema(df['close'], length=MA_20_PERIOD)
        
        # 计算ATR
        df['ATR_14'] = ta.atr(high=df['high'], low=df['low'], close=df['close'], length=ATR_PERIOD)
        
        # 计算RSI
        df['RSI_14'] = ta.rsi(df['close'], length=RSI_PERIOD)
        
        # 计算EMA距离
        df['EMA_DISTANCE'] = abs(df['EMA_10'] - df['EMA_20']) / df['close']
        
        return df
        
    except Exception as e:
        log_message("ERROR", f"处理K线数据失败: {str(e)}")
        return None

# ============================================
# 获取账户信息
# ============================================
def get_account_info():
    """获取账户信息"""
    try:
        balance = exchange.fetch_balance()
        usdt_balance = balance.get('USDT', {})
        free_balance = usdt_balance.get('free', 0)
        used_balance = usdt_balance.get('used', 0)
        total_balance = usdt_balance.get('total', 0)
        
        unrealized_pnl = 0
        try:
            positions = exchange.fetch_positions()
            for position in positions:
                if position['contracts'] > 0:
                    unrealized_pnl += float(position.get('unrealizedPnl', 0))
        except Exception as e:
            log_message("WARNING", f"获取未实现盈亏失败: {str(e)}")
        
        account_info = {
            'free_balance': free_balance,
            'used_balance': used_balance,
            'total_balance': total_balance,
            'unrealized_pnl': unrealized_pnl,
            'available_balance': free_balance,
            'equity': total_balance + unrealized_pnl
        }
        
        return account_info
        
    except Exception as e:
        log_message("ERROR", f"获取账户信息失败: {str(e)}")
        return None

# ============================================
# 风险管理检查
# ============================================
def check_and_execute_risk_management(symbol, signal, signal_strength):
    """执行风险管理检查并返回调整后的风险比率"""
    try:
        log_message("TRADE", "开始执行风控检查")
        
        # 检查每日交易次数限制
        if trade_stats['daily_trades'] >= MAX_DAILY_TRADES:
            log_message("WARNING", f"已达到每日最大交易次数 ({MAX_DAILY_TRADES})")
            return None
        
        # 检查每日亏损限制
        account_info = get_account_info()
        if not account_info:
            log_message("ERROR", "获取账户信息失败，无法下单")
            return None
        
        if trade_stats['initial_balance']:
            daily_loss_pct = abs(trade_stats['daily_pnl']) / trade_stats['initial_balance']
            if trade_stats['daily_pnl'] < 0 and daily_loss_pct > MAX_DAILY_LOSS:
                log_message("WARNING", f"已达到每日最大亏损 ({daily_loss_pct*100:.2f}%)")
                return None
        
        # 获取当前价格
        price = exchange.fetch_ticker(symbol)['last']
        state = market_states.get(symbol, 'range')
        
        # 基础风险比率
        adjusted_risk_ratio = RISK_PER_TRADE
        log_message("INFO", f"基础风险比率: {adjusted_risk_ratio:.4f}")
        
        # 根据信号强度调整
        if signal_strength > 70:
            adjusted_risk_ratio *= 1.5
            log_message("INFO", f"信号强度高({signal_strength})，风险比率提高至 {adjusted_risk_ratio:.4f}")
        elif signal_strength > 50:
            adjusted_risk_ratio *= 1.2
            log_message("INFO", f"信号强度中等({signal_strength})，风险比率提高至 {adjusted_risk_ratio:.4f}")
        elif signal_strength < 40:
            adjusted_risk_ratio *= 0.8
            log_message("INFO", f"信号强度低({signal_strength})，风险比率降低至 {adjusted_risk_ratio:.4f}")
        
        # 根据市场状态调整
        if state.startswith("strong_trend"):
            adjusted_risk_ratio *= 1.2
            log_message("INFO", f"强趋势市场，风险比率提高至 {adjusted_risk_ratio:.4f}")
        elif state.startswith("trend"):
            adjusted_risk_ratio *= 1.1
            log_message("INFO", f"趋势市场，风险比率提高至 {adjusted_risk_ratio:.4f}")
        
        # 限制最大风险
        adjusted_risk_ratio = min(adjusted_risk_ratio, RISK_PER_TRADE * 2.5)
        log_message("INFO", f"最终风险比率: {adjusted_risk_ratio:.4f}")
        
        return adjusted_risk_ratio
        
    except Exception as e:
        log_message("ERROR", f"风控检查失败: {str(e)}")
        return None

# ============================================
# 计算止损止盈价格
# ============================================
def calculate_stop_loss_take_profit(symbol, price, signal, market_state, atr_value):
    """计算止损止盈价格"""
    try:
        recent_klines = exchange.fetch_ohlcv(symbol, '1h', limit=10)
        
        if recent_klines and len(recent_klines) >= 5:
            recent_highs = [candle[2] for candle in recent_klines[-10:]]
            recent_lows = [candle[3] for candle in recent_klines[-10:]]
            
            if signal == "做多":
                support_level = min(recent_lows)
                atr_buffer = min(atr_value * 0.5, price * 0.015)
                stop_loss = support_level - atr_buffer
                
                max_sl_distance = price * MAX_SL_PERCENTAGE
                stop_loss = max(stop_loss, price - max_sl_distance)
                
                take_profit = price + (atr_value * 3)
                
            else:
                resistance_level = max(recent_highs)
                atr_buffer = min(atr_value * 0.5, price * 0.015)
                stop_loss = resistance_level + atr_buffer
                
                max_sl_distance = price * MAX_SL_PERCENTAGE
                stop_loss = min(stop_loss, price + max_sl_distance)
                
                take_profit = price - (atr_value * 3)
            
            log_message("INFO", f"计算的止损价格: {stop_loss:.4f}, 止盈价格: {take_profit:.4f}")
            return stop_loss, take_profit
            
    except Exception as e:
        log_message("ERROR", f"获取K线数据失败: {str(e)}")
    
    # 备用方案：使用固定百分比
    if signal == "做多":
        stop_loss = price * (1 - FIXED_SL_PERCENTAGE)
        take_profit = price * (1 + FIXED_TP_PERCENTAGE)
    else:
        stop_loss = price * (1 + FIXED_SL_PERCENTAGE)
        take_profit = price * (1 - FIXED_TP_PERCENTAGE)
    
    log_message("WARNING", "使用备用方法计算止损止盈")
    return stop_loss, take_profit

# ============================================
# 计算仓位大小
# ============================================
def calculate_position_size(account_info, symbol, price, stop_loss, risk_ratio):
    """计算仓位大小"""
    try:
        available_balance = account_info.get('available_balance', 0)
        if available_balance <= 0:
            log_message("ERROR", f"可用余额为0，无法计算仓位大小")
            return 0
        
        risk_amount = available_balance * risk_ratio
        log_message("INFO", f"风险金额: {risk_amount:.4f} USDT ({risk_ratio*100:.2f}%)")
        
        if stop_loss <= 0 or price <= 0:
            log_message("ERROR", f"价格或止损价格无效")
            return 0
        
        price_change_percentage = abs(price - stop_loss) / price
        if price_change_percentage <= 0:
            log_message("ERROR", f"价格变动百分比计算错误")
            return 0
        
        position_size = risk_amount / (price * price_change_percentage)
        
        # 应用杠杆
        leverage = DEFAULT_LEVERAGE
        position_size = position_size * leverage
        
        # 格式化仓位大小
        try:
            position_size = float(exchange.amount_to_precision(symbol, position_size))
        except:
            position_size = round(position_size, 6)
        
        # 检查最小交易金额
        min_notional = MIN_TRADE_AMOUNT_USD
        if position_size * price < min_notional:
            log_message("WARNING", f"计算的仓位过小 ({position_size * price:.2f} USD)，调整到最小值")
            position_size = min_notional / price
        
        log_message("INFO", f"计算的仓位大小: {position_size} (杠杆: {leverage}x)")
        return position_size
        
    except Exception as e:
        log_message("ERROR", f"计算仓位大小时出错: {str(e)}")
        return 0

# ============================================
# 生成交易信号
# ============================================
def generate_signal(symbol):
    """基于EMA10和EMA20交叉生成交易信号"""
    try:
        ohlcv = get_klines(symbol, timeframe_1h, limit=100)
        if ohlcv is None or len(ohlcv) < 50:
            log_message("WARNING", f"{symbol} 获取K线数据失败或数据不足")
            return None, 0
        
        df = process_klines(ohlcv)
        if df is None:
            return None, 0
        
        # 检查是否成功计算了指标
        if df['EMA_10'].isna().all() or df['EMA_20'].isna().all():
            log_message("WARNING", f"{symbol} EMA指标计算失败")
            return None, 0
        
        current_close = df['close'].iloc[-1]
        current_ema10 = df['EMA_10'].iloc[-1]
        current_ema20 = df['EMA_20'].iloc[-1]
        prev_ema10 = df['EMA_10'].iloc[-2]
        prev_ema20 = df['EMA_20'].iloc[-2]
        
        # ATR波动率过滤
        if not df['ATR_14'].isna().all():
            atr_value = df['ATR_14'].iloc[-1]
            atr_percentage = atr_value / current_close
            
            if atr_percentage < MIN_ATR_PERCENTAGE:
                log_message("DEBUG", f"{symbol} ATR波动率过低 ({atr_percentage:.4f})")
                return None, 0
            elif atr_percentage > MAX_ATR_PERCENTAGE:
                log_message("DEBUG", f"{symbol} ATR波动率过高 ({atr_percentage:.4f})")
                return None, 0
        
        # EMA距离过滤 - 降低要求以增加信号数量
        if not df['EMA_DISTANCE'].isna().all():
            ema_distance = df['EMA_DISTANCE'].iloc[-1]
            if ema_distance < MIN_EMA_DISTANCE * 0.7:  # 降低EMA距离要求
                log_message("DEBUG", f"{symbol} EMA距离过小 ({ema_distance:.4f})，震荡市场")
                return None, 0
        
        # RSI震荡市场过滤 - 缩小过滤范围以增加信号数量
        if not df['RSI_14'].isna().all():
            rsi_value = df['RSI_14'].iloc[-1]
            # 只在RSI非常中性且EMA距离小时过滤
            if 45 < rsi_value < 55:  # 缩小RSI过滤范围
                if not df['EMA_DISTANCE'].isna().all():
                    ema_distance = df['EMA_DISTANCE'].iloc[-1]
                    if ema_distance < MIN_EMA_DISTANCE:  # 只在EMA距离很小时过滤
                        log_message("DEBUG", f"{symbol} RSI中性且EMA距离小，震荡市场")
                        return None, 0
        
        signal = None
        strength = 0
        
        # EMA金叉 - 做多信号
        if prev_ema10 <= prev_ema20 and current_ema10 > current_ema20:
            signal = "做多"
            strength = min(100, int(50 + 50 * ((current_ema10 - current_ema20) / current_ema20)))
            log_message("SIGNAL", f"{symbol} EMA10上穿EMA20，生成做多信号，强度: {strength}")
        
        # EMA死叉 - 做空信号
        elif prev_ema10 >= prev_ema20 and current_ema10 < current_ema20:
            signal = "做空"
            strength = min(100, int(50 + 50 * ((current_ema20 - current_ema10) / current_ema10)))
            log_message("SIGNAL", f"{symbol} EMA10下穿EMA20，生成做空信号，强度: {strength}")
        
        # 更新市场状态
        if current_ema10 > current_ema20:
            market_states[symbol] = "trend_up"
        elif current_ema10 < current_ema20:
            market_states[symbol] = "trend_down"
        else:
            market_states[symbol] = "range"
        
        return signal, strength
        
    except Exception as e:
        log_message("ERROR", f"{symbol} 生成信号时出错: {str(e)}")
        traceback.print_exc()
        return None, 0

# ============================================
# 执行交易
# ============================================
def execute_trade(symbol, signal, signal_strength):
    """执行交易"""
    try:
        # 检查冷却期
        if symbol in cooldown_symbols and cooldown_symbols[symbol] > time.time():
            remaining_time = int(cooldown_symbols[symbol] - time.time())
            log_message("DEBUG", f"{symbol} 在冷却期内，还剩 {remaining_time} 秒")
            return False
        
        # 检查是否已有相同方向的持仓
        if symbol in position_tracker['positions']:
            existing_position = position_tracker['positions'][symbol]
            if (existing_position['side'] == 'long' and signal == "做多") or \
               (existing_position['side'] == 'short' and signal == "做空"):
                log_message("DEBUG", f"{symbol} 已有{signal}持仓，不重复开仓")
                return False
        
        # 检查持仓数量限制
        open_positions = len([pos for pos in position_tracker['positions'].values() if pos['size'] > 0])
        if open_positions >= MAX_OPEN_POSITIONS:
            log_message("WARNING", f"已达到最大持仓数量 ({MAX_OPEN_POSITIONS})")
            return False
        
        # 执行风险管理检查
        adjusted_risk = check_and_execute_risk_management(symbol, signal, signal_strength)
        if adjusted_risk is None:
            log_message("WARNING", f"{symbol} 风险管理检查未通过")
            return False
        
        # 获取当前价格
        ticker = exchange.fetch_ticker(symbol)
        price = ticker['last']
        
        # 获取K线数据用于计算止损止盈
        ohlcv = get_klines(symbol, timeframe_1h)
        if ohlcv is None:
            log_message("ERROR", f"{symbol} 获取K线数据失败")
            return False
        
        df = process_klines(ohlcv)
        if df is None or df['ATR_14'].isna().all():
            log_message("ERROR", f"{symbol} ATR指标计算失败")
            return False
        
        atr_value = df['ATR_14'].iloc[-1]
        
        # 计算止损止盈
        sl, tp = calculate_stop_loss_take_profit(
            symbol, price, signal, 
            market_states.get(symbol, 'range'), 
            atr_value
        )
        
        # 获取账户信息
        account_info = get_account_info()
        if not account_info:
            log_message("ERROR", f"{symbol} 获取账户信息失败")
            return False
        
        # 计算仓位大小
        position_size = calculate_position_size(
            account_info, symbol, price, sl, adjusted_risk
        )
        
        if position_size <= 0:
            log_message("ERROR", f"{symbol} 计算仓位大小失败")
            return False
        
        # 执行下单
        side = 'buy' if signal == "做多" else 'sell'
        pos_side = 'long' if signal == "做多" else 'short'
        
        try:
            log_message("TRADE", f"{symbol} 准备下单: {side} {position_size} @ {price}")
            
            # 市价下单
            order = exchange.create_order(
                symbol=symbol,
                type='market',
                side=side,
                amount=position_size,
                params={'posSide': pos_side}
            )
            
            log_message("SUCCESS", f"{symbol} 下单成功，订单ID: {order['id']}")
            
            # 等待订单执行
            time.sleep(2)
            
            # 验证订单状态
            try:
                order_status = exchange.fetch_order(order['id'], symbol)
                if order_status['status'] != 'closed':
                    log_message("WARNING", f"{symbol} 订单未完全成交: {order_status['status']}")
                
                actual_price = float(order_status.get('average', price))
                actual_size = float(order_status.get('filled', position_size))
                
            except Exception as e:
                log_message("WARNING", f"{symbol} 获取订单状态失败: {str(e)}")
                actual_price = price
                actual_size = position_size
            
            log_message("SUCCESS", f"{symbol} 成交确认: {side} {actual_size} @ {actual_price}")
            
            # 设置止损止盈
            sl_side = 'sell' if signal == "做多" else 'buy'
            tp_side = 'sell' if signal == "做多" else 'buy'
            
            sl_order_id = None
            tp_order_id = None
            
            try:
                # 设置止损
                sl_order = exchange.create_order(
                    symbol=symbol,
                    type='stop',
                    side=sl_side,
                    amount=actual_size,
                    price=sl,
                    params={'stopLossPrice': sl, 'posSide': pos_side}
                )
                sl_order_id = sl_order['id']
                log_message("SUCCESS", f"{symbol} 设置止损成功: {sl}")
                
                # 设置止盈
                tp_order = exchange.create_order(
                    symbol=symbol,
                    type='take_profit',
                    side=tp_side,
                    amount=actual_size,
                    price=tp,
                    params={'takeProfitPrice': tp, 'posSide': pos_side}
                )
                tp_order_id = tp_order['id']
                log_message("SUCCESS", f"{symbol} 设置止盈成功: {tp}")
                
            except Exception as e:
                log_message("ERROR", f"{symbol} 设置止损止盈失败: {str(e)}")
            
            # 更新持仓跟踪器
            position_tracker['positions'][symbol] = {
                'entry_price': actual_price,
                'size': actual_size,
                'side': 'long' if signal == "做多" else 'short',
                'pnl': 0.0,
                'sl': sl,
                'tp': tp,
                'entry_time': datetime.now(),
                'last_sl_tp_update_time': datetime.now(),
                'leverage': DEFAULT_LEVERAGE,
                'order_id': order['id'],
                'sl_order_id': sl_order_id,
                'tp_order_id': tp_order_id
            }
            
            # 更新交易统计
            trade_stats['total_trades'] += 1
            trade_stats['daily_trades'] += 1
            
            # 设置冷却期
            cooldown_symbols[symbol] = time.time() + COOLDOWN_PERIOD
            
            log_message("SUCCESS", f"{symbol} 交易执行完成 - {signal} {actual_size} @ {actual_price}")
            return True
            
        except Exception as e:
            log_message("ERROR", f"{symbol} 下单失败: {str(e)}")
            traceback.print_exc()
            return False
        
    except Exception as e:
        log_message("ERROR", f"{symbol} 执行交易时出错: {str(e)}")
        traceback.print_exc()
        return False

# ============================================
# 更新持仓状态
# ============================================
def update_positions():
    """更新所有持仓的状态"""
    try:
        positions = position_tracker['positions'].copy()
        
        for symbol, position in positions.items():
            try:
                # 获取当前价格
                ticker = exchange.fetch_ticker(symbol)
                current_price = ticker['last']
                
                # 计算未实现盈亏
                if position['side'] == 'long':
                    pnl_percentage = (current_price - position['entry_price']) / position['entry_price']
                else:
                    pnl_percentage = (position['entry_price'] - current_price) / position['entry_price']
                
                pnl = position['size'] * position['entry_price'] * pnl_percentage * position['leverage']
                position_tracker['positions'][symbol]['pnl'] = pnl
                
                # 检查是否需要更新移动止损
                last_update = position.get('last_sl_tp_update_time')
                if last_update and (datetime.now() - last_update).total_seconds() > 300:  # 每5分钟检查一次
                    update_trailing_stop_loss(symbol, position_tracker['positions'][symbol])
                
            except Exception as e:
                log_message("ERROR", f"{symbol} 更新持仓状态失败: {str(e)}")
        
        # 检查已平仓的持仓
        check_closed_positions()
                
    except Exception as e:
        log_message("ERROR", f"更新持仓状态时出错: {str(e)}")

# ============================================
# 检查已平仓的持仓
# ============================================
def check_closed_positions():
    """检查并处理已平仓的持仓"""
    try:
        # 获取实际持仓
        actual_positions = exchange.fetch_positions()
        actual_symbols = set()
        
        for pos in actual_positions:
            if pos['contracts'] > 0:
                actual_symbols.add(pos['symbol'])
        
        # 检查本地跟踪的持仓
        local_positions = list(position_tracker['positions'].keys())
        
        for symbol in local_positions:
            if symbol not in actual_symbols:
                # 持仓已平仓
                position = position_tracker['positions'][symbol]
                log_message("INFO", f"{symbol} 持仓已平仓，计算最终盈亏")
                
                # 记录平仓信息
                final_pnl = position.get('pnl', 0)
                trade_stats['total_profit_loss'] += final_pnl
                trade_stats['daily_pnl'] += final_pnl
                
                if final_pnl > 0:
                    trade_stats['wins'] += 1
                    trade_stats['total_profit'] += final_pnl
                    trade_stats['current_consecutive_wins'] += 1
                    trade_stats['current_consecutive_losses'] = 0
                    trade_stats['max_consecutive_wins'] = max(
                        trade_stats['max_consecutive_wins'],
                        trade_stats['current_consecutive_wins']
                    )
                    if final_pnl > trade_stats['largest_profit']:
                        trade_stats['largest_profit'] = final_pnl
                    log_message("SUCCESS", f"{symbol} 盈利平仓: +{final_pnl:.2f} USDT")
                else:
                    trade_stats['losses'] += 1
                    trade_stats['total_loss'] += abs(final_pnl)
                    trade_stats['current_consecutive_losses'] += 1
                    trade_stats['current_consecutive_wins'] = 0
                    trade_stats['max_consecutive_losses'] = max(
                        trade_stats['max_consecutive_losses'],
                        trade_stats['current_consecutive_losses']
                    )
                    if abs(final_pnl) > abs(trade_stats['largest_loss']):
                        trade_stats['largest_loss'] = final_pnl
                    log_message("WARNING", f"{symbol} 亏损平仓: {final_pnl:.2f} USDT")
                
                # 计算统计数据
                if trade_stats['wins'] > 0:
                    trade_stats['avg_profit'] = trade_stats['total_profit'] / trade_stats['wins']
                if trade_stats['losses'] > 0:
                    trade_stats['avg_loss'] = trade_stats['total_loss'] / trade_stats['losses']
                if trade_stats['total_loss'] > 0:
                    trade_stats['profit_factor'] = trade_stats['total_profit'] / trade_stats['total_loss']
                
                # 从跟踪器移除
                del position_tracker['positions'][symbol]
                
    except Exception as e:
        log_message("ERROR", f"检查已平仓持仓时出错: {str(e)}")

# ============================================
# 更新移动止损
# ============================================
def update_trailing_stop_loss(symbol, position):
    """更新移动止损"""
    try:
        recent_klines = exchange.fetch_ohlcv(symbol, '1h', limit=3)
        if not recent_klines or len(recent_klines) < 2:
            return False
        
        prev_candle = recent_klines[-2]
        prev_high = prev_candle[2]
        prev_low = prev_candle[3]
        
        ticker = exchange.fetch_ticker(symbol)
        current_price = ticker['last']
        
        updated = False
        
        if position['side'] == 'long':
            # 做多持仓，价格上涨时提高止损
            if current_price > position['entry_price'] * 1.02:  # 盈利超过2%才移动止损
                new_sl = max(prev_low, position['entry_price'] * 1.01)  # 至少保护1%利润
                
                if new_sl > position['sl']:
                    log_message("INFO", f"{symbol} 做多移动止损: {position['sl']:.4f} -> {new_sl:.4f}")
                    
                    try:
                        # 取消旧止损
                        if position.get('sl_order_id'):
                            exchange.cancel_order(position['sl_order_id'], symbol)
                        
                        # 创建新止损
                        sl_order = exchange.create_order(
                            symbol=symbol,
                            type='stop',
                            side='sell',
                            amount=position['size'],
                            price=new_sl,
                            params={'stopLossPrice': new_sl, 'posSide': 'long'}
                        )
                        
                        position['sl'] = new_sl
                        position['sl_order_id'] = sl_order['id']
                        position['last_sl_tp_update_time'] = datetime.now()
                        updated = True
                        
                    except Exception as e:
                        log_message("ERROR", f"{symbol} 更新移动止损失败: {str(e)}")
        
        elif position['side'] == 'short':
            # 做空持仓，价格下跌时降低止损
            if current_price < position['entry_price'] * 0.98:  # 盈利超过2%才移动止损
                new_sl = min(prev_high, position['entry_price'] * 0.99)  # 至少保护1%利润
                
                if new_sl < position['sl'] or position['sl'] == 0:
                    log_message("INFO", f"{symbol} 做空移动止损: {position['sl']:.4f} -> {new_sl:.4f}")
                    
                    try:
                        # 取消旧止损
                        if position.get('sl_order_id'):
                            exchange.cancel_order(position['sl_order_id'], symbol)
                        
                        # 创建新止损
                        sl_order = exchange.create_order(
                            symbol=symbol,
                            type='stop',
                            side='buy',
                            amount=position['size'],
                            price=new_sl,
                            params={'stopLossPrice': new_sl, 'posSide': 'short'}
                        )
                        
                        position['sl'] = new_sl
                        position['sl_order_id'] = sl_order['id']
                        position['last_sl_tp_update_time'] = datetime.now()
                        updated = True
                        
                    except Exception as e:
                        log_message("ERROR", f"{symbol} 更新移动止损失败: {str(e)}")
        
        return updated
        
    except Exception as e:
        log_message("ERROR", f"{symbol} 更新移动止损时出错: {str(e)}")
        return False

# ============================================
# 显示交易统计
# ============================================
def display_trading_stats():
    """显示交易统计信息"""
    try:
        log_message("INFO", "=" * 60)
        log_message("INFO", "交易统计")
        log_message("INFO", "=" * 60)
        
        account_info = get_account_info()
        if account_info:
            log_message("INFO", f"账户余额: {account_info['total_balance']:.2f} USDT")
            log_message("INFO", f"可用余额: {account_info['free_balance']:.2f} USDT")
            log_message("INFO", f"未实现盈亏: {account_info['unrealized_pnl']:.2f} USDT")
        
        if trade_stats['initial_balance']:
            total_return = (account_info['total_balance'] - trade_stats['initial_balance']) / trade_stats['initial_balance'] * 100
            log_message("INFO", f"总收益率: {total_return:.2f}%")
        
        log_message("INFO", f"总交易次数: {trade_stats['total_trades']}")
        log_message("INFO", f"今日交易次数: {trade_stats['daily_trades']}")
        log_message("INFO", f"今日盈亏: {trade_stats['daily_pnl']:.2f} USDT")
        
        if trade_stats['total_trades'] > 0:
            win_rate = trade_stats['wins'] / trade_stats['total_trades'] * 100
            log_message("INFO", f"胜率: {win_rate:.2f}%")
            log_message("INFO", f"盈利次数: {trade_stats['wins']}")
            log_message("INFO", f"亏损次数: {trade_stats['losses']}")
            log_message("INFO", f"平均盈利: {trade_stats['avg_profit']:.2f} USDT")
            log_message("INFO", f"平均亏损: {trade_stats['avg_loss']:.2f} USDT")
            log_message("INFO", f"盈亏比: {trade_stats['profit_factor']:.2f}")
            log_message("INFO", f"最大盈利: {trade_stats['largest_profit']:.2f} USDT")
            log_message("INFO", f"最大亏损: {trade_stats['largest_loss']:.2f} USDT")
            log_message("INFO", f"最大连胜: {trade_stats['max_consecutive_wins']}")
            log_message("INFO", f"最大连亏: {trade_stats['max_consecutive_losses']}")
        
        log_message("INFO", f"当前持仓数量: {len(position_tracker['positions'])}")
        
        if position_tracker['positions']:
            log_message("INFO", "\n当前持仓:")
            for symbol, pos in position_tracker['positions'].items():
                pnl_pct = (pos['pnl'] / (pos['entry_price'] * pos['size'])) * 100
                log_message("INFO", f"  {symbol}: {pos['side']} {pos['size']} @ {pos['entry_price']:.4f}, 盈亏: {pos['pnl']:.2f} USDT ({pnl_pct:.2f}%)")
        
        log_message("INFO", "=" * 60)
        
    except Exception as e:
        log_message("ERROR", f"显示交易统计时出错: {str(e)}")

# ============================================
# 主交易循环
# ============================================
def trading_loop():
    """主交易循环"""
    try:
        log_message("INFO", "启动EMA10/EMA20交叉策略交易系统")
        log_message("INFO", "=" * 60)
        
        # 交易对列表（按市值排序的前20个币种，剔除MATIC/USDT:USDT）
        trading_pairs = [
            'BTC/USDT:USDT', 'ETH/USDT:USDT', 'SOL/USDT:USDT', 'BNB/USDT:USDT',
            'XRP/USDT:USDT', 'DOGE/USDT:USDT', 'ADA/USDT:USDT', 'SHIB/USDT:USDT',
            'AVAX/USDT:USDT', 'DOT/USDT:USDT', 'LTC/USDT:USDT',
            'LINK/USDT:USDT', 'UNI/USDT:USDT', 'ATOM/USDT:USDT', 'ETC/USDT:USDT',
            'XLM/USDT:USDT', 'NEAR/USDT:USDT', 'FIL/USDT:USDT', 'APE/USDT:USDT'
        ]
        
        # 初始化交易统计
        account_info = get_account_info()
        if account_info:
            trade_stats['initial_balance'] = account_info['total_balance']
            trade_stats['current_balance'] = account_info['total_balance']
            log_message("SUCCESS", f"初始余额: {trade_stats['initial_balance']:.2f} USDT")
        
        loop_count = 0
        
        # 主循环
        while True:
            try:
                loop_count += 1
                log_message("INFO", f"\n{'='*60}")
                log_message("INFO", f"循环 #{loop_count} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                log_message("INFO", f"{'='*60}")
                
                # 检查每日重置
                check_daily_reset()
                
                # 更新持仓状态
                update_positions()
                
                # 检查每个交易对的信号
                for symbol in trading_pairs:
                    try:
                        # 生成信号
                        signal, strength = generate_signal(symbol)
                        
                        # 更新最新信号
                        latest_signals[symbol] = (signal, strength, datetime.now())
                        
                        # 如果有信号，执行交易
                        if signal and strength > 40:  # 只交易强度大于40的信号
                            log_message("SIGNAL", f"{symbol} 生成{signal}信号，强度: {strength}")
                            execute_trade(symbol, signal, strength)
                        
                        # 避免请求过快
                        time.sleep(1)
                        
                    except Exception as e:
                        log_message("ERROR", f"{symbol} 处理信号时出错: {str(e)}")
                
                # 显示交易统计（每10个循环显示一次）
                if loop_count % 10 == 0:
                    display_trading_stats()
                
                # 等待下一个循环
                log_message("INFO", "等待60秒后继续下一个循环...")
                time.sleep(60)
                
            except Exception as e:
                log_message("ERROR", f"交易循环中出错: {str(e)}")
                traceback.print_exc()
                time.sleep(60)
                
    except KeyboardInterrupt:
        log_message("INFO", "交易循环被手动中断")
        display_trading_stats()
    except Exception as e:
        log_message("ERROR", f"交易循环启动失败: {str(e)}")
        traceback.print_exc()

# ============================================
# 启动交易系统
# ============================================
if __name__ == "__main__":
    try:
        # 测试API连接
        if not test_api_connection():
            log_message("ERROR", "API连接测试失败，请检查配置")
            raise Exception("API连接失败")
        
        # 防止Colab掉线
        prevent_colab_timeout()
        
        # 显示启动信息
        log_message("SUCCESS", "=" * 60)
        log_message("SUCCESS", "EMA10/EMA20交叉策略实盘交易系统")
        log_message("SUCCESS", "=" * 60)
        log_message("INFO", f"杠杆: {DEFAULT_LEVERAGE}x")
        log_message("INFO", f"单次风险: {RISK_PER_TRADE*100}%")
        log_message("INFO", f"最大持仓: {MAX_OPEN_POSITIONS}")
        log_message("INFO", f"冷却期: {COOLDOWN_PERIOD//60}分钟")
        log_message("INFO", f"每日最大交易: {MAX_DAILY_TRADES}")
        log_message("INFO", f"每日最大亏损: {MAX_DAILY_LOSS*100}%")
        log_message("SUCCESS", "=" * 60)
        
        # 启动交易循环
        trading_loop()
        
    except Exception as e:
        log_message("ERROR", f"启动交易系统失败: {str(e)}")
        traceback.print_exc()